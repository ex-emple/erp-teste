#!/usr/bin/env python3
"""
Script unifi√© de gestion et test de l'ERP m√©dical
Remplace tous les scripts disparates (test_complete.py, validate_and_clean.py, etc.)

Usage:
    python manage_erp.py [action] [options]

Actions disponibles:
    test        - Lance tous les tests
    validate    - Valide le syst√®me
    cleanup     - Nettoie les fichiers temporaires
    backup      - Sauvegarde la base de donn√©es
    health      - V√©rifie la sant√© du syst√®me
    demo        - Cr√©e des donn√©es de d√©monstration
    stats       - Affiche les statistiques
"""

import os
import sys
import django
import argparse
from datetime import datetime, timedelta

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.core.management import call_command
from django.test.utils import get_runner
from django.conf import settings
from django.utils import timezone
from django.core.exceptions import ImproperlyConfigured

# Imports locaux
from core.models import Patient, RendezVous, Consultation, Facture
from core.services import statistics_service, maintenance_service


class ERPManager:
    """
    Gestionnaire unifi√© pour l'ERP m√©dical
    """
    
    def __init__(self):
        self.banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                    üè• ERP M√âDICAL MANAGER                     ‚ïë
    ‚ïë                  Gestionnaire Unifi√© v2.0                   ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        
    def print_banner(self):
        print(self.banner)
        print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    def test_system(self, verbose=False):
        """Lance tous les tests du syst√®me"""
        print("üß™ LANCEMENT DES TESTS SYST√àME")
        print("=" * 50)
        
        try:
            # Tests de connectivit√© base de donn√©es
            print("üìä Test de connectivit√© base de donn√©es...")
            patients_count = Patient.objects.count()
            rdv_count = RendezVous.objects.count()
            consultations_count = Consultation.objects.count()
            factures_count = Facture.objects.count()
            
            print(f"   ‚úÖ Base de donn√©es accessible")
            print(f"   üìã Patients: {patients_count}")
            print(f"   üìÖ Rendez-vous: {rdv_count}")
            print(f"   ü©∫ Consultations: {consultations_count}")
            print(f"   üí∞ Factures: {factures_count}")
            
            # Tests des mod√®les
            print("\nüîç Test de l'int√©grit√© des mod√®les...")
            
            # V√©rifier les relations
            orphan_consultations = Consultation.objects.filter(patient__isnull=True).count()
            orphan_rdv = RendezVous.objects.filter(patient__isnull=True).count()
            
            if orphan_consultations == 0 and orphan_rdv == 0:
                print("   ‚úÖ Int√©grit√© des relations OK")
            else:
                print(f"   ‚ö†Ô∏è  Relations orphelines d√©tect√©es:")
                if orphan_consultations > 0:
                    print(f"      - {orphan_consultations} consultations sans patient")
                if orphan_rdv > 0:
                    print(f"      - {orphan_rdv} RDV sans patient")
            
            # Tests des services
            print("\nüîß Test des services...")
            
            # Test service statistiques
            try:
                today_stats = statistics_service.get_daily_stats()
                print("   ‚úÖ Service de statistiques OK")
            except Exception as e:
                print(f"   ‚ùå Erreur service statistiques: {e}")
            
            # Test service maintenance
            try:
                health_data = maintenance_service.check_system_health()
                if 'error' not in health_data:
                    print("   ‚úÖ Service de maintenance OK")
                else:
                    print(f"   ‚ö†Ô∏è  Service maintenance: {health_data['error']}")
            except Exception as e:
                print(f"   ‚ùå Erreur service maintenance: {e}")
            
            # Tests des URLs (simulation)
            print("\nüåê Test des URLs principales...")
            urls_to_test = [
                '/',
                '/patients/',
                '/rdv/',
                '/consultations/',
                '/factures/'
            ]
            
            for url in urls_to_test:
                print(f"   üìç {url} - OK (simulation)")
            
            print("\n‚úÖ TESTS TERMIN√âS AVEC SUCC√àS")
            
        except Exception as e:
            print(f"\n‚ùå ERREUR LORS DES TESTS: {e}")
            return False
        
        return True
    
    def validate_system(self):
        """Valide l'int√©grit√© compl√®te du syst√®me"""
        print("üîç VALIDATION DU SYST√àME")
        print("=" * 50)
        
        issues_found = []
        
        try:
            # Validation de la configuration Django
            print("‚öôÔ∏è  Validation de la configuration...")
            
            # V√©rifier les settings essentiels
            required_settings = ['SECRET_KEY', 'DATABASES', 'INSTALLED_APPS']
            for setting in required_settings:
                if not hasattr(settings, setting):
                    issues_found.append(f"Setting manquant: {setting}")
                else:
                    print(f"   ‚úÖ {setting} configur√©")
            
            # Validation de la base de donn√©es
            print("\nüìä Validation de la base de donn√©es...")
            
            # Test de performances
            start_time = datetime.now()
            test_query = Patient.objects.all()[:10]
            list(test_query)  # Force l'ex√©cution
            query_time = (datetime.now() - start_time).total_seconds()
            
            if query_time < 1.0:
                print(f"   ‚úÖ Performance DB OK ({query_time:.3f}s)")
            else:
                issues_found.append(f"Requ√™te lente d√©tect√©e: {query_time:.3f}s")
            
            # Validation des donn√©es
            print("\nüìã Validation des donn√©es...")
            
            # Patients avec donn√©es manquantes
            patients_no_name = Patient.objects.filter(nom='').count()
            if patients_no_name > 0:
                issues_found.append(f"{patients_no_name} patients sans nom")
            
            # RDV dans le pass√© avec statut 'prevu'
            past_rdv = RendezVous.objects.filter(
                date_heure__lt=timezone.now(),
                statut='prevu'
            ).count()
            if past_rdv > 0:
                issues_found.append(f"{past_rdv} RDV pass√©s encore programm√©s")
            
            # Factures avec montant n√©gatif
            negative_factures = Facture.objects.filter(montant_total__lt=0).count()
            if negative_factures > 0:
                issues_found.append(f"{negative_factures} factures avec montant n√©gatif")
            
            # Validation de la s√©curit√©
            print("\nüîí Validation de la s√©curit√©...")
            
            if settings.DEBUG:
                issues_found.append("Mode DEBUG activ√© en production")
            else:
                print("   ‚úÖ Mode DEBUG d√©sactiv√©")
            
            if settings.SECRET_KEY == 'votre-cl√©-secr√®te-tr√®s-s√©curis√©e':
                issues_found.append("SECRET_KEY par d√©faut utilis√©e")
            else:
                print("   ‚úÖ SECRET_KEY personnalis√©e")
            
            # Affichage des r√©sultats
            print("\n" + "=" * 50)
            if not issues_found:
                print("‚úÖ SYST√àME VALID√â - AUCUN PROBL√àME D√âTECT√â")
            else:
                print(f"‚ö†Ô∏è  {len(issues_found)} PROBL√àME(S) D√âTECT√â(S):")
                for i, issue in enumerate(issues_found, 1):
                    print(f"   {i}. {issue}")
                
        except Exception as e:
            print(f"\n‚ùå ERREUR LORS DE LA VALIDATION: {e}")
            return False
        
        return len(issues_found) == 0
    
    def cleanup_system(self, force=False):
        """Nettoie le syst√®me des fichiers temporaires"""
        print("üßπ NETTOYAGE DU SYST√àME")
        print("=" * 50)
        
        if not force:
            confirm = input("‚ö†Ô∏è  Proc√©der au nettoyage? (oui/non): ")
            if confirm.lower() not in ['oui', 'o', 'yes', 'y']:
                print("Nettoyage annul√©")
                return False
        
        try:
            cleaned_items = []
            
            # Nettoyer les fichiers de cache Python
            print("üóëÔ∏è  Nettoyage des caches Python...")
            import glob
            pycache_dirs = glob.glob('**/__pycache__', recursive=True)
            for cache_dir in pycache_dirs:
                try:
                    import shutil
                    shutil.rmtree(cache_dir)
                    cleaned_items.append(f"Cache: {cache_dir}")
                except Exception:
                    pass
            
            # Nettoyer les logs anciens
            print("üìÅ Nettoyage des logs anciens...")
            try:
                deleted_logs, errors = maintenance_service.cleanup_old_logs(90)
                cleaned_items.append(f"{deleted_logs} fichiers de logs")
                
                if errors:
                    print(f"   ‚ö†Ô∏è  Erreurs lors du nettoyage logs:")
                    for error in errors:
                        print(f"      - {error}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erreur nettoyage logs: {e}")
            
            # Nettoyer les fichiers temporaires
            print("üóÇÔ∏è  Nettoyage des fichiers temporaires...")
            temp_files = glob.glob('*.tmp') + glob.glob('*.temp')
            for temp_file in temp_files:
                try:
                    os.remove(temp_file)
                    cleaned_items.append(f"Temp: {temp_file}")
                except Exception:
                    pass
            
            print(f"\n‚úÖ NETTOYAGE TERMIN√â")
            print(f"üìã √âl√©ments nettoy√©s: {len(cleaned_items)}")
            for item in cleaned_items:
                print(f"   - {item}")
            
        except Exception as e:
            print(f"\n‚ùå ERREUR LORS DU NETTOYAGE: {e}")
            return False
        
        return True
    
    def backup_database(self):
        """Cr√©e une sauvegarde de la base de donn√©es"""
        print("üíæ SAUVEGARDE DE LA BASE DE DONN√âES")
        print("=" * 50)
        
        try:
            success, result = maintenance_service.backup_database()
            
            if success:
                print(f"‚úÖ Sauvegarde cr√©√©e avec succ√®s!")
                print(f"üìÅ Fichier: {result}")
                
                # Afficher la taille du fichier
                if os.path.exists(result):
                    size_mb = os.path.getsize(result) / (1024 * 1024)
                    print(f"üíæ Taille: {size_mb:.2f} MB")
            else:
                print(f"‚ùå √âchec de la sauvegarde: {result}")
                return False
                
        except Exception as e:
            print(f"‚ùå ERREUR LORS DE LA SAUVEGARDE: {e}")
            return False
        
        return True
    
    def check_health(self):
        """V√©rifie la sant√© globale du syst√®me"""
        print("üîé V√âRIFICATION DE LA SANT√â SYST√àME")
        print("=" * 50)
        
        try:
            health_data = maintenance_service.check_system_health()
            
            if 'error' in health_data:
                print(f"‚ùå Erreur lors de la v√©rification: {health_data['error']}")
                return False
            
            # Affichage d√©taill√© de la sant√©
            overall_score = health_data.get('overall_score', 0)
            
            print(f"üéØ Score global de sant√©: {overall_score:.1f}/100")
            
            # D√©tails par composant
            components = ['database', 'storage', 'memory', 'performance']
            
            for component in components:
                comp_data = health_data.get(component, {})
                status = comp_data.get('status', 'unknown')
                score = comp_data.get('score', 0)
                
                if status == 'healthy' or status == 'excellent' or status == 'good':
                    icon = "‚úÖ"
                elif status == 'warning' or status == 'acceptable':
                    icon = "‚ö†Ô∏è "
                else:
                    icon = "‚ùå"
                
                print(f"{icon} {component.capitalize()}: {status} ({score}/100)")
                
                # D√©tails sp√©cifiques
                if component == 'storage':
                    usage = comp_data.get('usage_percent', 0)
                    free_gb = comp_data.get('free_gb', 0)
                    print(f"   üíæ Espace utilis√©: {usage:.1f}% - Libre: {free_gb:.1f}GB")
                
                elif component == 'memory':
                    usage = comp_data.get('usage_percent', 0)
                    available_gb = comp_data.get('available_gb', 0)
                    print(f"   üß† RAM utilis√©e: {usage:.1f}% - Disponible: {available_gb:.1f}GB")
                
                elif component == 'performance':
                    response_time = comp_data.get('db_response_time_ms', 0)
                    print(f"   ‚ö° Temps de r√©ponse DB: {response_time:.1f}ms")
                
                elif component == 'database':
                    patients = comp_data.get('patients_count', 0)
                    consultations = comp_data.get('consultations_count', 0)
                    print(f"   üìä {patients} patients, {consultations} consultations")
            
            # Recommandations
            print(f"\nüí° RECOMMANDATIONS:")
            if overall_score >= 90:
                print("   üåü Syst√®me en excellent √©tat - Aucune action requise")
            elif overall_score >= 70:
                print("   üëç Syst√®me en bon √©tat - Surveillance recommand√©e")
            elif overall_score >= 50:
                print("   ‚ö†Ô∏è  Syst√®me correct - Optimisations recommand√©es")
            else:
                print("   üö® Attention requise - Maintenance urgente conseill√©e")
            
        except Exception as e:
            print(f"‚ùå ERREUR LORS DE LA V√âRIFICATION: {e}")
            return False
        
        return True
    
    def create_demo_data(self, count=10):
        """Cr√©e des donn√©es de d√©monstration"""
        print(f"üìä CR√âATION DE DONN√âES DE D√âMONSTRATION ({count} √©l√©ments)")
        print("=" * 50)
        
        try:
            # Utiliser la commande Django
            call_command('erp_manager', 'create_sample_data', '--count', str(count))
            print("‚úÖ Donn√©es de d√©monstration cr√©√©es avec succ√®s!")
            
        except Exception as e:
            print(f"‚ùå ERREUR LORS DE LA CR√âATION: {e}")
            return False
        
        return True
    
    def show_statistics(self):
        """Affiche les statistiques compl√®tes"""
        print("üìà STATISTIQUES DU SYST√àME")
        print("=" * 50)
        
        try:
            # Statistiques g√©n√©rales
            total_patients = Patient.objects.count()
            total_rdv = RendezVous.objects.count()
            total_consultations = Consultation.objects.count()
            total_factures = Facture.objects.count()
            
            print(f"üìä Vue d'ensemble:")
            print(f"   üë• Patients: {total_patients}")
            print(f"   üìÖ Rendez-vous: {total_rdv}")
            print(f"   ü©∫ Consultations: {total_consultations}")
            print(f"   üí∞ Factures: {total_factures}")
            
            # Statistiques du jour
            today_stats = statistics_service.get_daily_stats()
            print(f"\nüìÖ Aujourd'hui ({today_stats.get('date', 'N/A')}):")
            print(f"   ü©∫ Consultations: {today_stats.get('consultations_jour', 0)}")
            print(f"   üí∞ Revenus: {today_stats.get('revenus_jour', 0)}‚Ç¨")
            print(f"   üìÖ RDV programm√©s: {today_stats.get('rdv_programmes', 0)}")
            
            # Statistiques du mois
            now = timezone.now()
            monthly_stats = statistics_service.get_monthly_stats(now.year, now.month)
            print(f"\nüìÜ Ce mois ({monthly_stats.get('periode', 'N/A')}):")
            print(f"   ü©∫ Consultations: {monthly_stats.get('consultations_mois', 0)}")
            print(f"   üí∞ Revenus: {monthly_stats.get('revenus_mois', 0)}‚Ç¨")
            print(f"   üìä Revenu moyen: {monthly_stats.get('revenu_moyen', 0)}‚Ç¨")
            print(f"   üë• Patients uniques: {monthly_stats.get('patients_uniques', 0)}")
            
            print("\n‚úÖ Statistiques affich√©es avec succ√®s!")
            
        except Exception as e:
            print(f"‚ùå ERREUR LORS DU CALCUL: {e}")
            return False
        
        return True


def main():
    """Point d'entr√©e principal"""
    parser = argparse.ArgumentParser(
        description='Gestionnaire unifi√© de l\'ERP m√©dical',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        'action',
        choices=['test', 'validate', 'cleanup', 'backup', 'health', 'demo', 'stats'],
        help='Action √† ex√©cuter'
    )
    
    parser.add_argument(
        '--count',
        type=int,
        default=10,
        help='Nombre d\'√©l√©ments pour les donn√©es de d√©mo'
    )
    
    parser.add_argument(
        '--force',
        action='store_true',
        help='Force l\'ex√©cution sans confirmation'
    )
    
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='Mode verbeux'
    )
    
    args = parser.parse_args()
    
    # Cr√©er le gestionnaire
    manager = ERPManager()
    manager.print_banner()
    
    # Ex√©cuter l'action
    success = False
    
    if args.action == 'test':
        success = manager.test_system(args.verbose)
    elif args.action == 'validate':
        success = manager.validate_system()
    elif args.action == 'cleanup':
        success = manager.cleanup_system(args.force)
    elif args.action == 'backup':
        success = manager.backup_database()
    elif args.action == 'health':
        success = manager.check_health()
    elif args.action == 'demo':
        success = manager.create_demo_data(args.count)
    elif args.action == 'stats':
        success = manager.show_statistics()
    
    # Code de sortie
    if success:
        print(f"\nüéâ Action '{args.action}' termin√©e avec succ√®s!")
        sys.exit(0)
    else:
        print(f"\nüí• √âchec de l'action '{args.action}'")
        sys.exit(1)


if __name__ == '__main__':
    main()
